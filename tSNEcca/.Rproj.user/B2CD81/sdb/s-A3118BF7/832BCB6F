{
    "collab_server" : "",
    "contents" : "# tSNE-cca method\n# try \n# description: Compute tSNE-correlation analysis between two data matrices\n# \nwd.path <- '/Users/ilaria_bonavita/My_project/tSNEcca'\nsetwd(wd.path)\n\n# dimension of the input features space\nq <- 3\n# dimension of the output transformed features\nd <- 2\n# Overal number of examples (train+test)\nN <- 100\n# Number of training examples\nN_paired <- 100\n\ntraining <- F\n\n### Generate data \nMaxAngle <- 4*pi\nMinRadius <-0.3\nMaxRadius <- 8\nsx <- 0.5\nsy <- 0.5\nset.seed(1244)\n## Generate data for views 1,2\nt <- seq(0, MaxAngle, length.out = N)\nr <- seq(MinRadius, MaxRadius, length.out = N) + 2*runif(N)\n#### generate X, the noise can be added!\nset.seed(123)\n#X <- cbind(rep(1:length(cos(t))),cos(t),rnorm(N))\n#X <- cbind(r*sin(t+0*rnorm(N)*0.05),t,rnorm(N))\nX <- cbind(r*cos(t+0*rnorm(N)*0.05),r*sin(t+0*rnorm(N)*0.05),rnorm(N))\n#X <- X + 0*matrix(rnorm(N), ncol = q)\n#### generate Y, the noise can be added!\n#Y <- cbind(rep(1:length(sin(t))),sin(t),rnorm(N))\n#Y <- cbind(r*cos(t+0*rnorm(N)*0.05),t,rnorm(N))\n#Y <- cbind(r*sin(t+0*rnorm(N)*0.05),r*cos(t+0*rnorm(N)*0.05),rnorm(N))\nY <- cbind(t+0*rnorm(N)*1, 2*rnorm(N),rnorm(N))\n#Y <- Y + 0*cbind(rep(0, N), rnorm(N))\n\nif(anyNA(X)| anyNA(Y)){\n  remove.na <- unlist(apply(cbind(X,Y), 1, anyNA))\n  X <- X[!remove.na, , drop = F]\n  Y <- Y[!remove.na, , drop = F]\n  rm(remove.na) \n}\n\nif (training){\n## Training data\nPairedIndices <- sample(1:N, N_paired)\n## Test (or validation) data\nUnpairedIndices <- setdiff(1:N,PairedIndices)\n# Work with the train set\nXTr <- X[PairedIndices,]\nYTr <- Y[PairedIndices,]\n}\n\nXTr <- X\nYTr <- Y\n\n#### Define a matrix of the distance between Xi and Xj (Yi and Yj) for all the possible combination of elements in X (Y)\nXTr.pairs <- combn(seq(1:nrow(XTr)),2)\nYTr.pairs <- combn(seq(1:nrow(YTr)),2)\n\n# For simplicity, we use only the distances from now on\n## Each row correspond to a pair (i,j), columns are the coordinates of the distance xi-xj\nXTr.dist <- XTr[XTr.pairs[1,],] - XTr[XTr.pairs[2,],]\nYTr.dist <- YTr[YTr.pairs[1,],] - YTr[YTr.pairs[2,],]\n\n#=================================================================\n#############  Batch gradient descent\nsource('./batch.grad.desc.fun.R')\nbatch.grad.desc.fun(XTr.dist, YTr.dist, N, dim.out=2,\n                                gamma.list= c(0.06, 0.05, 0.02, 0.005),\n                                nexper = 1,\n                                maxiter= 500,\n                                perf.cca = T,\n                                wd.path= '/Users/ilaria_bonavita/My_project/tSNEcca'\n                                )\nbatch.grad.desc.fun(XTr.dist, YTr.dist, N, dim.out=2,\n                    gamma.list= c(0.06,0.05),\n                    nexper = 1,\n                    maxiter= 200,\n                    perf.cca = F,\n                    wd.path= '/Users/ilaria_bonavita/My_project/tSNEcca',\n                    exp.name='cos_sin_const'\n                    )\n\n###==============================================================================\n### EXAMPLE with plots\n\n# Retrieve the projection matrices\nmat.path <- '/Users/ilaria_bonavita/My_project/tSNEcca/N100_in3_out2_rnd/exp_1gamma0.05/'\nWout <- readRDS(paste0(mat.path,'Wout.RDS'))\nZout <- readRDS(paste0(mat.path,'Zout.RDS'))\n\nsource('./tsne2Dplot.fun.R')\ntsne2Dplot.fun(XTr,YTr,Wout,Zout,'/Users/ilaria_bonavita/My_project/tSNEcca/N100_in3_out2_cos_sin_const/exp_1gamma0.05')\ntsne2Dplot.fun(XTr,YTr,Wout.nocca,Zout.nocca,'/Users/ilaria_bonavita/My_project/tSNEcca/N100_in3_out2_rnd/exp_1gamma0.05')\n\n\n# Random W and Z\n#set.seed(151)\n\n#Wrand <- matrix(rnorm(N*ncol(XTr.dist)),nrow = d, ncol = ncol(XTr.dist))\n#Wrand <- t(apply(Wrand,1, function(x){ x/sum(x)}))\n#Zrand <- matrix(rnorm(N*ncol(YTr.dist)),nrow = d, ncol = ncol(YTr.dist))\n#Zrand <- t(apply(Zrand,1, function(x){ x/sum(x)}))\n \n#XWrand <- Wrand%*%t(X[PairedIndices,])\n#YZrand <- Zrand%*%t(Y[PairedIndices,])          \n\n#pdf(paste0(mat.path,'random_projections.pdf'))\n#par(mfrow = c(1, 2))\n#col_b2y <- colorRampPalette(c(\"blue\", \"cyan\", \"orange\", \"yellow\"))\n#plot(t(XWrand), pch = 19, col = col_b2y(N), \n#     main = \"View of X\", xlab = \"X.1\", ylab = \"X.2\", xlim = range(XWrand[1,]*1.1), ylim = range(XWrand[2,]*1.1))\n#plot(t(YZrand), pch = 19, col = col_b2y(N), \n#     main = \"View of Y\", xlab = \"Y.1\", ylab = \"Y.2\", xlim = range(YZrand[1,]*1.1), ylim = range(YZrand[2,]*1.3))\n# dev.off()\n \n \n# Perfomr NCCA\nrequire(FNN)\nrequire(Matrix)\nrequire(irlba)\nsource('./ncca.R')\nncca_res <- ncca(X,Y, d = 2, hx = 0.75, hy = 0.75, nx=5, ny=5)\n\nX_proj_paired <- ncca_res$X_new\nY_proj_paired <- ncca_res$Y_new\n\nx11()\npar(mfrow = c(1, 2))\ncol_b2y <- colorRampPalette(c(\"blue\", \"cyan\", \"orange\", \"yellow\"))\nplot(X_proj_paired, pch = 19, col = col_b2y(N), \n     main = \"View of X\", xlab = \"X.1\", ylab = \"X.2\", xlim = range(X_proj_paired[,1]*1.1), ylim = range(X_proj_paired[,2]*1.1))\nplot(Y_proj_paired, pch = 19, col = col_b2y(N), \n     main = \"View of Y\", xlab = \"Y.1\", ylab = \"Y.2\", xlim = range(Y_proj_paired[,1]*1.1), ylim = range(Y_proj_paired[,2]*1.3))\n\nx11()\npar(mfrow = c(1, 2))\ncol_b2y <- colorRampPalette(c(\"blue\", \"cyan\", \"orange\", \"yellow\"))\nplot(X_proj_paired[,1], Y_proj_paired[,1] ,pch = 19, col = col_b2y(N), \n     main = \"View of X1 vs Y1\", xlab = \"X.1\", ylab = \"Y.1\", xlim = range(X_proj_paired[,1]*1.1), ylim = range(Y_proj_paired[,1]*1.1))\nplot(X_proj_paired[,2],Y_proj_paired[,2], pch = 19, col = col_b2y(N), \n     main = \"View of X2 vs Y2\", xlab = \"X.2\", ylab = \"Y.2\", xlim = range(X_proj_paired[,2]*1.1), ylim = range(Y_proj_paired[,2]*1.3))\n\n\n# Perform KCCA\nlibrary(kernlab)\nlibrary(geigen)\nsource('./kerncca.R')\n\nkerncca_res <- kerncca(X,Y,nlatent = 1)\n\nx11()\npar(mfrow = c(1, 2))\ncol_b2y <- colorRampPalette(c(\"blue\", \"cyan\", \"orange\", \"yellow\"))\nplot(kerncca_res$latent1, pch = 19, col = col_b2y(N), \n     main = \"View of X\", xlab = \"X.1\", ylab = \"X.2\", xlim = range(kerncca_res$latent1[,1]*1.1), ylim = range(kerncca_res$latent1[,2]*1.1))\nplot(kerncca_res$latent2, pch = 19, col = col_b2y(N), \n     main = \"View of Y\", xlab = \"Y.1\", ylab = \"Y.2\", xlim = range(kerncca_res$latent2[,1]*1.1), ylim = range(kerncca_res$latent2[,2]*1.3))\n\nx11()\npar(mfrow = c(1, 2))\ncol_b2y <- colorRampPalette(c(\"blue\", \"cyan\", \"orange\", \"yellow\"))\nplot(kerncca_res$latent1[,1], kerncca_res$latent2[,1] ,pch = 19, col = col_b2y(N), \n     main = \"View of X1 vs Y1\", xlab = \"X.1\", ylab = \"Y.1\", xlim = range(kerncca_res$latent1[,1]*1.1), ylim = range(kerncca_res$latent2[,1]*1.1))\nplot(kerncca_res$latent1[,2],kerncca_res$latent2[,2], pch = 19, col = col_b2y(N), \n     main = \"View of X2 vs Y2\", xlab = \"X.2\", ylab = \"Y.2\", xlim = range(kerncca_res$latent1[,2]*1.1), ylim = range(kerncca_res$latent2[,2]*1.3))\n\n\n# Perform CCA\ncca_res  <- cancor(X,Y)\n\nXWcca <- X %*% cca_res$xcoef\nYZcca <- Y %*% cca_res$ycoef\n\nx11()\npar(mfrow = c(1, 2))\ncol_b2y <- colorRampPalette(c(\"blue\", \"cyan\", \"orange\", \"yellow\"))\nplot(XWcca, pch = 19, col = col_b2y(N), \n     main = \"View of X\", xlab = \"X.1\", ylab = \"X.2\", xlim = range(XWcca[,1]*1.1), ylim = range(XWcca[,2]*1.1))\nplot(YZcca, pch = 19, col = col_b2y(N), \n     main = \"View of Y\", xlab = \"Y.1\", ylab = \"Y.2\", xlim = range(YZcca[,1]*1.1), ylim = range(YZcca[,2]*1.3))\n\nx11()\npar(mfrow = c(1, 2))\ncol_b2y <- colorRampPalette(c(\"blue\", \"cyan\", \"orange\", \"yellow\"))\nplot(XWcca[,1], YZcca[,1] ,pch = 19, col = col_b2y(N), \n     main = \"View of X1 vs Y1\", xlab = \"X.1\", ylab = \"Y.1\", xlim = range(XWcca[,1]*1.1), ylim = range(YZcca[,1]*1.1))\nplot(XWcca[,2],YZcca[,2], pch = 19, col = col_b2y(N), \n     main = \"View of X2 vs Y2\", xlab = \"X.2\", ylab = \"Y.2\", xlim = range(XWcca[,2]*1.1), ylim = range(YZcca[,2]*1.3))\n\n",
    "created" : 1484560179219.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2970842759",
    "id" : "832BCB6F",
    "lastKnownWriteTime" : 1484909398,
    "last_content_update" : 1484909535331,
    "path" : "~/My_project/tSNEcca/main.R",
    "project_path" : "main.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}