Z <- t(apply(Z,1, function(x){ x/sum(x)}))
Wold <- W
Zold <- Z
for(i in c(1: maxiter)){
W <- Wold - gamma*C.W.deriv(Wold,Zold)
Z <- Zold - gamma*C.Z.deriv(Wold,Zold)
print(W)
print(Z)
Wold <- W
Zold <- Z
}
C.fun(W,Z)
W <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
W <- t(apply(W,1, function(x){ x/sum(x)}))
Z <- matrix(rnorm(NY*q),nrow = d, ncol = ncol(Y))
Z <- t(apply(Z,1, function(x){ x/sum(x)}))
C.fun(Wold,Zold)
C.fun(W,Z)
W <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
W <- t(apply(W,1, function(x){ x/sum(x)}))
Z <- matrix(rnorm(NY*q),nrow = d, ncol = ncol(Y))
Z <- t(apply(Z,1, function(x){ x/sum(x)}))
Wold <- W
Zold <- Z
C.fun(Wold,Zold)
for(i in c(1: maxiter)){
W <- Wold - gamma*C.W.deriv(Wold,Zold)
Z <- Zold - gamma*C.Z.deriv(Wold,Zold)
print(W)
print(Z)
Wold <- W
Zold <- Z
}
C.fun(W,Z)
W <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
W <- t(apply(W,1, function(x){ x/sum(x)}))
Z <- matrix(rnorm(NY*q),nrow = d, ncol = ncol(Y))
Z <- t(apply(Z,1, function(x){ x/sum(x)}))
Wold <- W
Zold <- Z
C.fun(Wold,Zold)
W <- Wold - gamma*C.W.deriv(Wold,Zold)
print(W)
Z <- Zold - gamma*C.Z.deriv(Wold,Zold)
print(Z)
Wold <- W
Zold <- Z
W <- Wold - gamma*C.W.deriv(Wold,Zold)
print(W)
Z <- Zold - gamma*C.Z.deriv(Wold,Zold)
print(Z)
C.fun(W,Z)
Wold <- W
Zold <- Z
W <- Wold - gamma*C.W.deriv(Wold,Zold)
print(W)
Z <- Zold - gamma*C.Z.deriv(Wold,Zold)
print(Z)
C.fun(W,Z)
install.packages('sgd')
Sys.unsetenv('https_proxy')
install.packages('sgd')
library(sgd)
trace(sgd)
trace('sgd')
getAnywhere(sgd)
edit(getAnywhere('sgd'), file='source_sgd.r')
eps <- 0.001
X.test <- X.D[,1]
Y.test <- Y.D[,1]
set.seed(123)
W.test <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
W.test <- t(apply(W.test,1, function(x){ x/sum(x)}))
W.test
Z.test <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
Z.test <- t(apply(Z.test,1, function(x){ x/sum(x)}))
Z.test
eps <- 0.001
X.test <- X.D[,1]
Y.test <- Y.D[,1]
p.deriv.approx <-(p.fun(W.test+eps,X.test) - p.fun(W.test-eps, X.test))/(2*eps)
p.deriv.approx
p.deriv(W.test,X.test)
p.fun(W.test+eps,X.test)
eps <- exp(-15)
p.deriv.approx <-(p.fun(W.test+eps,X.test) - p.fun(W.test-eps, X.test))/(2*eps)
p.deriv.approx
set.seed(123)
W.test <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
Z.test <- matrix(rnorm(NY*q),nrow = d, ncol = ncol(Y))
p.deriv.approx <-(p.fun(W.test+eps,X.test) - p.fun(W.test-eps, X.test))/(2*eps)
p.deriv(W.test,X.test)
p.deriv.approx
X.D
t <- 1
z <-1
p1 <- 0
for (i in 1:ncol(X.pairs)){
p1 <- p1 + (-t(W[t,])*X.D[,i]*(X.D[t,i])*p.fun(W,X.D[,i]))
}
p1
p1 <- 0
for (i in 1:ncol(X.pairs)){
p1 <- p1 + (-t(W[t,])%*%X.D[,i]*(X.D[t,i])*p.fun(W,X.D[,i]))
}
p1
X.d <- X.D[,1]
X.d
p.deriv.element <- function(W,X.d,t,z){
p1 <- 0
for (i in 1:ncol(X.pairs)){
p1 <- p1 + (-t(W[t,])%*%X.D[,i]*(X.D[t,i])*p.fun(W,X.D[,i]))
}
p<- -(p.fun(W,X.d)/sigma2)*p1 - t(W[t,])%*%X.d*(X.d[t])*p.fun(W,X.d)
return(p)
}
p.deriv.element(W,X.d,1,0)
p.deriv.approx <-(p.fun(W+eps,X.d) - p.fun(W-eps, X.d))/(2*eps)
p.deriv.approx
p.deriv.approx <-(p.fun(W[1,1]+eps,X.d) - p.fun(W[1,1]-eps, X.d))/(2*eps)
p.deriv.approx <-(p.fun(W[1,1]+eps,X.d[1]) - p.fun(W[1,1]-eps, X.d[1]))/(2*eps)
p.deriv.element <- function(W,X.d,t,z){
p1 <- 0
for (i in 1:ncol(X.pairs)){
p1 <- p1 + (-t(W[t,])%*%X.D[,i]*(X.D[z,i])*p.fun(W,X.D[,i]))
}
p<- -(p.fun(W,X.d)/sigma2)*p1 - t(W[t,])%*%X.d*(X.d[z])*p.fun(W,X.d)
return(p)
}
p.deriv.element(W,X.D[,4],1,2)
p.deriv.element(W,X.D[,1],1,0)
p.deriv.element(W,X.D[,1],1,1)
W.plus <- W.test
W.plus[t,z] <- W.test[t,z] + eps
t
z
W.minus <- W.test
W.minus[t,z] <- W.test[t,z] - eps
Z.plus <- Z.test
Z.plus[t,z] <- Z.test[t,z] + eps
Z.minus <- Z.test
Z.minus[t,z] <- Z.test[t,z] - eps
Z.minus
Z.plus
eps <-0.0001
t <- 1
z <- 1
W.plus <- W.test
W.plus[t,z] <- W.test[t,z] + eps
W.minus <- W.test
W.minus[t,z] <- W.test[t,z] - eps
Z.plus <- Z.test
Z.plus[t,z] <- Z.test[t,z] + eps
Z.minus <- Z.test
Z.minus[t,z] <- Z.test[t,z] - eps
X.test <- X.D[,1]
Y.test <- Y.D[,1]
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
p.deriv.element(W.test,X.test,t,z)
eps <-0.00001
set.seed(123)
W.test <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
W.test <- t(apply(W.test,1, function(x){ x/sum(x)}))
Z.test <- matrix(rnorm(NY*q),nrow = d, ncol = ncol(Y))
Z.test <- t(apply(Z.test,1, function(x){ x/sum(x)}))
W.plus <- W.test
W.plus[t,z] <- W.test[t,z] + eps
W.minus <- W.test
W.minus[t,z] <- W.test[t,z] - eps
Z.plus <- Z.test
Z.plus[t,z] <- Z.test[t,z] + eps
Z.minus <- Z.test
Z.minus[t,z] <- Z.test[t,z] - eps
X.test <- X.D[,1]
Y.test <- Y.D[,1]
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.element(W.test,X.test,t,z)
p.deriv.approx
p.deriv(W.test,X.test)
p.deriv(W.test,X.test)[t,z]
p.deriv.approx*2
W <- W.test
X.d <- X.D[,i]
pd <- 0
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[,i]
pd <- pd + exp(-norm(t(W)%*%X.dkl)^2/(2*sigma2))
}
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[,i]
pd <- pd + exp(-norm(W%*%X.dkl)^2/(2*sigma2))
}
p <- exp(-nomr(t(W)%&%X.d)^2/(2*sigma2))/pd
p <- exp(-norm(t(W)%&%X.d)^2/(2*sigma2))/pd
p <- exp(-norm(W%&%X.d)^2/(2*sigma2))/pd
p <- exp(-norm(W%*%X.d)^2/(2*sigma2))/pd
p
p.denom <-sum( apply(X.pairs, 2, function(P){
X.dkl <- X[P[1],]-X[P[2],]
p.denom <- exp(-norm(t(W)*X.dkl)^2/(2*sigma2))
return(p.denom)
}))
p.denom
pd
p.denom <-sum( apply(X.pairs, 2, function(P){
X.dkl <- X[P[1],]-X[P[2],]
p.denom <- exp(-norm(W%*%X.dkl)^2/(2*sigma2))
return(p.denom)
}))
p.denom
pd <- 0
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[,i]
pd <- pd + exp(-norm(W%*%X.dkl)^2/(2*sigma2))
}
pd
pd/2
W%*%X.dkl
W*X.dkl
X[1,]-X[2,]
X.D[,1]
X.D
X
X[1,]-X[2,]
X.pairs
p.fun <- function(W, X.d){
p.denom <-sum( apply(X.pairs, 2, function(P){
X.dkl <- X[P[1],]-X[P[2],]
p.denom <- exp(-norm(W%*%X.dkl)^2/(2*sigma2))
return(p.denom)
}))
p=exp(-norm(t(W)*X.d)^2/(2*sigma2))/p.denom
return(p)
}
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
p.deriv.element(W.test,X.test,t,z)
p.fun <- function(W, X.d){
# p.denom <-sum( apply(X.pairs, 2, function(P){
#  X.dkl <- X[P[1],]-X[P[2],]
# p.denom <- exp(-norm(W%*%X.dkl)^2/(2*sigma2))
#return(p.denom)
#}))
p.denom <- 0
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[,i]
p.denom <- p.denom + exp(-norm(W*X.dkl)^2/(2*sigma2))
}
p=exp(-norm(t(W)*X.d)^2/(2*sigma2))/p.denom
return(p)
}
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
p.deriv.element(W.test,X.test,t,z)
eps <-0.0000001
t <- 1
z <- 1
W.plus <- W.test
W.plus[t,z] <- W.test[t,z] + eps
W.minus <- W.test
W.minus[t,z] <- W.test[t,z] - eps
Z.plus <- Z.test
Z.plus[t,z] <- Z.test[t,z] + eps
Z.minus <- Z.test
Z.minus[t,z] <- Z.test[t,z] - eps
X.test <- X.D[,1]
Y.test <- Y.D[,1]
# p.deriv
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
p.deriv.element(W.test,X.test,t,z)
#
p.fun <- function(W, X.d){
# p.denom <-sum( apply(X.pairs, 2, function(P){
#  X.dkl <- X[P[1],]-X[P[2],]
# p.denom <- exp(-norm(W%*%X.dkl)^2/(2*sigma2))
#return(p.denom)
#}))
p.denom <- 0
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[,i]
p.denom <- p.denom + exp(-norm(W%*%X.dkl)^2/(2*sigma2))
}
p=exp(-norm(W%*%X.d)^2/(2*sigma2))/p.denom
return(p)
}
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
p.deriv.element(W.test,X.test,t,z)
X.test <- X.D[,2]
Y.test <- Y.D[,2]
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.element(W.test,X.test,t,z)
p.deriv.approx
eps <-0.0001
t <- 1
z <- 1
W.plus <- W.test
W.plus[t,z] <- W.test[t,z] + eps
W.minus <- W.test
W.minus[t,z] <- W.test[t,z] - eps
Z.plus <- Z.test
Z.plus[t,z] <- Z.test[t,z] + eps
Z.minus <- Z.test
Z.minus[t,z] <- Z.test[t,z] - eps
X.test <- X.D[,2]
Y.test <- Y.D[,2]
# p.deriv
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.element(W.test,X.test,t,z)
p.deriv.approx
X.test <- X.D[,3]
Y.test <- Y.D[,3]
# p.deriv
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.element(W.test,X.test,t,z)
p.deriv.approx
p.deriv(W.test,X.test,t,z)
p.deriv(W.test,X.test)
p.deriv(W.test,X.test)[tz]
p.deriv(W.test,X.test)[t,z]
p.deriv <- function(W,X.d){
p1 <-matrix(0,nrow = nrow(W), ncol = ncol(W))
for(i in 1:ncol(X.pairs)){
p1 <- -W %*% as.matrix(X.D[,i]) %*% t(as.matrix(X.D[,i]))*p.fun(W,X.D[,i]) + p1
}
p.deriv <- (p.fun(W,X.d)/sigma2)*(-W %*% as.matrix(X.d) %*% t(as.matrix(X.d)) - p1)
return(p.deriv)
}
p.deriv(W.test,X.test)
p.deriv(W.test,X.test)[1,1]
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
W %*% as.matrix(X.D[,i])
W %*% as.matrix(X.D[,i]) %*% t(as.matrix(X.D[,i]))
t(W)
t(W)*X.D[,1]
t(W)%*%X.D[,1]
-W %*% t(as.matrix(X.D[,i]))
-norm(W%*%X.dkl)^2
norm(W%*%X.dkl)^2
X.12 <- X.D[,1]
X.12
X[1,] - X[2,]
X.pairs[1]
X.pairs[1,]
X.pairs[,1]
dim(X.pairs)
X[X.pairs[1,],] - X[X.pairs[2,],]
X[X.pairs[1,],] - X[X.pairs[2,],][1,]
X.D <- X[X.pairs[1,],] - X[X.pairs[2,],]
X.D[1,]
X[1,]-X[2,]
X.D <- X[X.pairs[1,],] - X[X.pairs[2,],]
Y.D <- Y[Y.pairs[1,],] - Y[Y.pairs[2,],]
X.D
Y.D <- Y[Y.pairs[1,],] - Y[Y.pairs[2,],]
p.fun <- function(W, X.d){
# p.denom <-sum( apply(X.pairs, 2, function(P){
#  X.dkl <- X[P[1],]-X[P[2],]
# p.denom <- exp(-norm(W%*%X.dkl)^2/(2*sigma2))
#return(p.denom)
#}))
p.denom <- 0
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[i,]
p.denom <- p.denom + exp(-norm(W%*%X.dkl)^2/(2*sigma2))
}
p=exp(-norm(W%*%X.d)^2/(2*sigma2))/p.denom
return(p)
}
p.deriv <- function(W,X.d){
p1 <-matrix(0,nrow = nrow(W), ncol = ncol(W))
for(i in 1:ncol(X.pairs)){
p1 <- -W %*% as.matrix(X.D[i,]) %*% t(as.matrix(X.D[i,]))*p.fun(W,X.D[i,]) + p1
}
p.deriv <- (p.fun(W,X.d)/sigma2)*(-W %*% as.matrix(X.d) %*% t(as.matrix(X.d)) - p1)
return(p.deriv)
}
set.seed(123)
W.test <- matrix(rnorm(NX*q),nrow = d, ncol = ncol(X))
W.test <- t(apply(W.test,1, function(x){ x/sum(x)}))
Z.test <- matrix(rnorm(NY*q),nrow = d, ncol = ncol(Y))
Z.test <- t(apply(Z.test,1, function(x){ x/sum(x)}))
eps <-0.0001
t <- 1
z <- 1
W.plus <- W.test
W.plus[t,z] <- W.test[t,z] + eps
W.minus <- W.test
W.minus[t,z] <- W.test[t,z] - eps
Z.plus <- Z.test
Z.plus[t,z] <- Z.test[t,z] + eps
Z.minus <- Z.test
Z.minus[t,z] <- Z.test[t,z] - eps
X.test <- X.D[1,]
Y.test <- Y.D[1,]
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
p.deriv(W.test,X.test)[t,z]
p.deriv.element(W.test,X.test,t,z)
X.D[1,]
p.deriv(W.test,X.test)
-W %*% as.matrix(X.D[i,])
p.fun <- function(W, X.d){
# p.denom <-sum( apply(X.pairs, 2, function(P){
#  X.dkl <- X[P[1],]-X[P[2],]
# p.denom <- exp(-norm(W%*%X.dkl)^2/(2*sigma2))
#return(p.denom)
#}))
p.denom <- 0
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[i,]
p.denom <- p.denom + exp(-norm(W%*%X.dkl)^2/(2*sigma2))
}
p=exp(-norm(W%*%X.d)^2/(2*sigma2))/p.denom
return(p)
}
p.deriv <- function(W,X.d){
p1 <-matrix(0,nrow = nrow(W), ncol = ncol(W))
for(i in 1:ncol(X.pairs)){
p1 <- -W %*% as.matrix(X.D[i,]) %*% t(as.matrix(X.D[i,]))*p.fun(W,X.D[i,]) + p1
}
p.deriv <- (p.fun(W,X.d)/sigma2)*(-W %*% as.matrix(X.d) %*% t(as.matrix(X.d)) - p1)
return(p.deriv)
}
p.deriv.approx <-(p.fun(W.plus,X.test) - p.fun(W.minus, X.test))/(2*eps)
p.deriv.approx
p.deriv(W.test,X.test)[t,z]
p.deriv(W.test,X.test)
p.denom <- 0
for(i in 1:ncol(X.pairs)){
X.dkl <- X.D[i,]
p.denom <- p.denom + exp(-norm(W%*%X.dkl)^2/(2*sigma2))
}
p.denom
for(i in 1:ncol(X.pairs)){
p11 <- -W %*% as.matrix(X.D[i,]) %*% t(as.matrix(X.D[i,]))*p.fun(W,X.D[i,]) + p1
}
p1 <-matrix(0,nrow = nrow(W), ncol = ncol(W))
for(i in 1:ncol(X.pairs)){
p1 <- -W %*% as.matrix(X.D[i,]) %*% t(as.matrix(X.D[i,]))*p.fun(W,X.D[i,]) + p1
}
p1
wd.path <- '/Users/ilaria_bonavita/My_project/tSNEcca'
setwd(wd.path)
# dimension of the input features space
q <- 3
# dimension of the output transformed features
d <- 2
# Overal number of examples (train+test)
N <- 100
# Number of training examples
N_paired <- 100
training <- F
### Generate data
MaxAngle <- 4*pi
MinRadius <-0.3
MaxRadius <- 8
sx <- 0.5
sy <- 0.5
set.seed(1244)
## Generate data for views 1,2
t <- seq(0, MaxAngle, length.out = N)
r <- seq(MinRadius, MaxRadius, length.out = N) + 2*runif(N)
#### generate X, the noise can be added!
set.seed(123)
X <- cbind(r*cos(t+0*rnorm(N)*0.05),t,rnorm(N))
#X <- cbind(r*cos(t+0*rnorm(N)*0.05),r*sin(t+0*rnorm(N)*0.05),rnorm(N))
#X <- X + 0*matrix(rnorm(N), ncol = q)
#### generate Y, the noise can be added!
Y <- cbind(r*sin(t+0*rnorm(N)*0.05),t,rnorm(N))
#Y <- cbind(r*sin(t+0*rnorm(N)*0.05),r*cos(t+0*rnorm(N)*0.05),rnorm(N))
#Y <- cbind(t+0*rnorm(N)*1, 2*rnorm(N),rnorm(N))
#Y <- Y + 0*cbind(rep(0, N), rnorm(N))
## Training data
PairedIndices <- sample(1:N, N_paired)
## Test (or validation) data
UnpairedIndices <- setdiff(1:N,PairedIndices)
## remove the NAs in the matrices
if(anyNA(X)| anyNA(Y)){
remove.na <- unlist(apply(cbind(X,Y), 1, anyNA))
X <- X[!remove.na, , drop = F]
Y <- Y[!remove.na, , drop = F]
rm(remove.na)
}
if (training){
# Work with the train set
XTr <- X[PairedIndices,]
YTr <- Y[PairedIndices,]
}
XTr <-X
YTr <- Y
#### Define a matrix of the distance between Xi and Xj (Yi and Yj) for all the possible combination of elements in X (Y)
XTr.pairs <- combn(seq(1:nrow(XTr)),2)
YTr.pairs <- combn(seq(1:nrow(YTr)),2)
# For simplicity, we use only the distances from now on
## Each row correspond to a pair (i,j), columns are the coordinates of the distance xi-xj
XTr.dist <- XTr[XTr.pairs[1,],] - XTr[XTr.pairs[2,],]
YTr.dist <- YTr[YTr.pairs[1,],] - YTr[YTr.pairs[2,],]
mat.path <- '/Users/ilaria_bonavita/My_project/tSNEcca/N100_in3_out2_rnd/exp_1gamma0.05/'
Wout <- readRDS(paste0(mat.path,'Wout.RDS'))
Zout <- readRDS(paste0(mat.path,'Zout.RDS'))
library(FNN)
library(Matrix)
library(irlba)
source('./ncca.R')
ncca_res <- ncca(XTr,YTr,
d = 2, hx = 0.75, hy = 0.75, nx = 10, ny=10)
X_proj <- ncca_res$X_new
Y_proj <- ncca_res$Y_new
